// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kv.proto

#include "kv.pb.h"
#include "kv.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace ss7config {

static const char* Config_method_names[] = {
  "/ss7config.Config/GetConfig",
};

std::unique_ptr< Config::Stub> Config::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Config::Stub> stub(new Config::Stub(channel));
  return stub;
}

Config::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetConfig_(Config_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Config::Stub::GetConfig(::grpc::ClientContext* context, const ::ss7config::Empty& request, ::ss7config::ss7Config* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ss7config::ss7Config>* Config::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::ss7config::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ss7config::ss7Config>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ss7config::ss7Config>* Config::Stub::PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::ss7config::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ss7config::ss7Config>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, false);
}

Config::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::ss7config::Empty, ::ss7config::ss7Config>(
          std::mem_fn(&Config::Service::GetConfig), this)));
}

Config::Service::~Service() {
}

::grpc::Status Config::Service::GetConfig(::grpc::ServerContext* context, const ::ss7config::Empty* request, ::ss7config::ss7Config* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ss7config

