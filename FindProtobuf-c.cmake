SET(PROTOBUF_FOUND TRUE)

# SEARCH FOR HEADER

FIND_PATH(PROTOBUF_INCLUDE_DIR
          NAMES "google/protobuf-c/protobuf-c.h"
          PATHS "/usr/local"
                "/usr"
                ENV PROTOBUF_ROOTDIR
          PATH_SUFFIXES "include")

# HEADER IS FOUND

IF (PROTOBUF_INCLUDE_DIR)

    SET(PROTOBUF_INCLUDE_DIR "${PROTOBUF_INCLUDE_DIR}/google/protobuf-c")

    # SEARCH FOR LIBRARY

    FIND_LIBRARY(PROTOBUF_LIBRARIES
                 NAMES "libprotobuf-c.so"
                 PATHS "/usr/local"
                       "/usr"
                 ENV PROTOBUF_ROOTDIR
                 PATH_SUFFIXES "lib")

ENDIF (PROTOBUF_INCLUDE_DIR)

# HEADER IS NOT FOUND

IF (NOT PROTOBUF_INCLUDE_DIR)
    SET(PROTOBUF_FOUND FALSE)
ENDIF (NOT PROTOBUF_INCLUDE_DIR)

# LIBRARY IS NOT FOUND

IF (NOT PROTOBUF_LIBRARIES)
    SET(PROTOBUF_FOUND FALSE)
ENDIF (NOT PROTOBUF_LIBRARIES)

SET(PROTOBUF_ERROR_MESSAGE "Unable to find PROTOBUF library")

IF (NOT PROTOBUF_FOUND)
    SET(PROTOBUF_ERROR_MESSAGE "Unable to find PROTOBUF library v${PROTOBUF_FIND_VERSION} (${PROTOBUF_FOUND_VERSION} was found)")
ENDIF (NOT PROTOBUF_FOUND)

# ADD DEFINITIONS

IF (PROTOBUF_FOUND)

    IF (CMAKE_SYSTEM_PROCESSOR MATCHES ia64)
        SET(PROTOBUF_DEFINITIONS "-D_REENTRANT -D_FILE_OFFSET_BITS=64")
    ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES amd64)
        SET(PROTOBUF_DEFINITIONS "-D_REENTRANT -D_FILE_OFFSET_BITS=64")
    ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES x86_64)
        SET(PROTOBUF_DEFINITIONS "-D_REENTRANT -D_FILE_OFFSET_BITS=64")
    ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES ia64)
        SET(PROTOBUF_DEFINITIONS "-D_REENTRANT")
    ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES ia64)

ENDIF (PROTOBUF_FOUND)

# FINAL STATUS MESSAGES

IF (PROTOBUF_FOUND)

    IF (NOT PROTOBUF_FIND_QUIETLY)
        MESSAGE(STATUS "PROTOBUF-C")
    ENDIF (NOT PROTOBUF_FIND_QUIETLY)

    MARK_AS_ADVANCED(PROTOBUF_INCLUDE_DIR
                     PROTOBUF_LIBRARIES
                     PROTOBUF_DEFINITIONS)

ELSE (PROTOBUF_FOUND)

    IF (PROTOBUF_FIND_REQUIRED)
        MESSAGE(SEND_ERROR "${PROTOBUF_ERROR_MESSAGE}")
    ENDIF (PROTOBUF_FIND_REQUIRED)

ENDIF (PROTOBUF_FOUND)
