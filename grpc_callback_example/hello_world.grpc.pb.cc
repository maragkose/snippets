// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello_world.proto

#include "hello_world.pb.h"
#include "hello_world.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace HW {

static const char* HelloWorld_method_names[] = {
  "/HW.HelloWorld/Chat",
};

std::unique_ptr< HelloWorld::Stub> HelloWorld::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HelloWorld::Stub> stub(new HelloWorld::Stub(channel));
  return stub;
}

HelloWorld::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Chat_(HelloWorld_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::HW::HelloNote, ::HW::HelloNote>* HelloWorld::Stub::ChatRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::HW::HelloNote, ::HW::HelloNote>::Create(channel_.get(), rpcmethod_Chat_, context);
}

void HelloWorld::Stub::experimental_async::Chat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::HW::HelloNote,::HW::HelloNote>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::HW::HelloNote,::HW::HelloNote>::Create(stub_->channel_.get(), stub_->rpcmethod_Chat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::HW::HelloNote, ::HW::HelloNote>* HelloWorld::Stub::AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::HW::HelloNote, ::HW::HelloNote>::Create(channel_.get(), cq, rpcmethod_Chat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::HW::HelloNote, ::HW::HelloNote>* HelloWorld::Stub::PrepareAsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::HW::HelloNote, ::HW::HelloNote>::Create(channel_.get(), cq, rpcmethod_Chat_, context, false, nullptr);
}

HelloWorld::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HelloWorld_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< HelloWorld::Service, ::HW::HelloNote, ::HW::HelloNote>(
          [](HelloWorld::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::HW::HelloNote,
             ::HW::HelloNote>* stream) {
               return service->Chat(ctx, stream);
             }, this)));
}

HelloWorld::Service::~Service() {
}

::grpc::Status HelloWorld::Service::Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::HW::HelloNote, ::HW::HelloNote>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace HW

